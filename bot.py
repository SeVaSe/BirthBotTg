
import telebot
import schedule
import time
from threading import Thread
from database import Database
import logging
from apscheduler.schedulers.background import BackgroundScheduler
from telebot import types

TOKEN = '–¢–£–¢ –¢–û–ö–ï–ù'

bot = telebot.TeleBot(TOKEN)
db = Database()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s',
                    handlers=[
                        logging.FileHandler("bot.log"),
                        logging.StreamHandler()
                    ])


# Define the menu keyboard
def get_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    start_button = types.KeyboardButton("üéä–°—Ç–∞—Ä—Çüéä")
    show_button = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—åüîé")
    nc_button = types.KeyboardButton("–¢—ã...‚ù§Ô∏è")
    menu_button = types.KeyboardButton("–ü–æ–º–æ—â—åüÜò")
    time_button = types.KeyboardButton("–í—Ä–µ–º—è‚è≥")
    keyboard.add(start_button, show_button, nc_button, time_button, menu_button)
    return keyboard




# COMMAND
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id

    if user_id in [1026824739, 7258801885, 969625434]:
        if not db.user_exists(user_id):
            lines = [
                "–°—Ç—Ä–æ–∫–∞ 1", "–°—Ç—Ä–æ–∫–∞ 2", "–°—Ç—Ä–æ–∫–∞ 3", "–°—Ç—Ä–æ–∫–∞ 4", "–°—Ç—Ä–æ–∫–∞ 5",
                "–°—Ç—Ä–æ–∫–∞ 6"
                # "–°—Ç—Ä–æ–∫–∞ 7", "–°—Ç—Ä–æ–∫–∞ 8", "–°—Ç—Ä–æ–∫–∞ 9", "–°—Ç—Ä–æ–∫–∞ 10",
                # "–°—Ç—Ä–æ–∫–∞ 11", "–°—Ç—Ä–æ–∫–∞ 12", "–°—Ç—Ä–æ–∫–∞ 13", "–°—Ç—Ä–æ–∫–∞ 14", "–°—Ç—Ä–æ–∫–∞ 15",
                # "–°—Ç—Ä–æ–∫–∞ 16", "–°—Ç—Ä–æ–∫–∞ 17", "–°—Ç—Ä–æ–∫–∞ 18", "–°—Ç—Ä–æ–∫–∞ 19", "–°—Ç—Ä–æ–∫–∞ 20",
                # "–°—Ç—Ä–æ–∫–∞ 21", "–°—Ç—Ä–æ–∫–∞ 22", "–°—Ç—Ä–æ–∫–∞ 23", "–°—Ç—Ä–æ–∫–∞ 24", "–°—Ç—Ä–æ–∫–∞ 25",
                # "–°—Ç—Ä–æ–∫–∞ 26", "–°—Ç—Ä–æ–∫–∞ 27", "–°—Ç—Ä–æ–∫–∞ 28", "–°—Ç—Ä–æ–∫–∞ 29", "–°—Ç—Ä–æ–∫–∞ 30",
                # "–°—Ç—Ä–æ–∫–∞ 31", "–°—Ç—Ä–æ–∫–∞ 32"
            ]
            photo_paths = [
                "/home/sevase/TgBot/res/Images/img1.png", "/home/sevase/TgBot/res/Images/img2.png", "/home/sevase/TgBot/res/Images/img3.png", "/home/sevase/TgBot/res/Images/img4.png",
                "/home/sevase/TgBot/res/Images/img5.png", "/home/sevase/TgBot/res/Images/img6.png"
                # "res/Images/img7.png", "res/Images/img8.png",
                # "res/Images/img9.png", "res/Images/img10.png", "res/Images/img11.png", "res/Images/img12.png",
                # "res/Images/img13.png", "res/Images/img14.png", "res/Images/img15.png", "res/Images/img16.png",
                # "res/Images/img17.png", "res/Images/img18.png", "res/Images/img19.png", "res/Images/img20.png",
                # "res/Images/img21.png", "res/Images/img22.png", "res/Images/img23.png", "res/Images/img24.png",
                # "res/Images/img25.png", "res/Images/img26.png", "res/Images/img27.png", "res/Images/img28.png",
                # "res/Images/img29.png", "res/Images/img30.png", "res/Images/img31.png", "res/Images/img32.png"
            ]

            db.fill_database_for_user(user_id, lines, photo_paths)
            bot.send_message(user_id,
                             "–ò–≥–æ—Ä—å –¢–ï–°–¢–¨ –ù–ê–•–û–û–û–û–û–û–û–û–û–û–û–û–û–û–ô",
                             reply_markup=get_menu_keyboard())
            logging.info(f"New user {user_id} registered and database filled.")
        else:
            bot.send_message(user_id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–Ω!", reply_markup=get_menu_keyboard())
            logging.info(f"User {user_id} attempted to register again.")
    else:
        bot.send_message(user_id, "–ü–∏—à–æ–≤ –Ω–∞—Ö–æ–π!")
        logging.warning(f"Unauthorized user {user_id} attempted to use the bot.")


@bot.message_handler(commands=['show'])
def show_poem(message):
    user_id = message.chat.id

    try:
        full = db.get_full_poem(user_id)
        bot.send_message(user_id, full, reply_markup=get_menu_keyboard())
        logging.info(f"User {user_id} requested full poem.")
    except:
        bot.send_message(user_id, "–°—Ç—Ä–æ–∫ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è —É —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç—É...üòï", reply_markup=get_menu_keyboard())
        logging.info(f"User {user_id} error full poem.")


@bot.message_handler(commands=['ncfeel'])
def show_nc(message):
    import json
    import random
    user_id = message.chat.id

    with open('/home/sevase/TgBot/res/StructFile/phrs.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

    phrases = data['phrases']
    rnd = random.choice(phrases)
    bot.send_message(user_id, rnd, reply_markup=get_menu_keyboard())


@bot.message_handler(commands=['time'])
def show_time(message):
    from datetime import datetime, timedelta
    user_id = message.chat.id

    try:
        now = datetime.now()
        row_time = now.replace(hour=12, minute=0, second=0, microsecond=0)

        if now > row_time:
            row_time += timedelta(days=1)
        answ_time = row_time - now

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –º–∏–Ω—É—Ç –∏ —Å–µ–∫—É–Ω–¥
        hour = answ_time.seconds // 3600
        min = (answ_time.seconds % 3600) // 60
        sec = answ_time.seconds % 60

        bot.send_message(user_id, f"–î–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å: \n{hour} —á–∞—Å–æ–≤‚è≥ \n{min} –º–∏–Ω—É—Ç‚è≥ \n{sec} —Å–µ–∫—É–Ω–¥‚è≥", reply_markup=get_menu_keyboard())
        logging.info(f"User {user_id} requested time.")
    except:
        bot.send_message(user_id, "–°–æ –≤—Ä–µ–º–µ–Ω–µ–º –æ—à–∏–±–∫–∞ –∫–∞–∫–∞—è —Ç–æ...üòï", reply_markup=get_menu_keyboard())
        logging.info(f"User {user_id} error time.")


# WORK FUNC
def send_daily_line():
    logging.info("send_daily_line started")
    user_ids = get_all_users()
    logging.info(f"Users to send: {user_ids}")

    for user_id in user_ids:
        res = db.get_next_line(user_id)
        if res:
            line_id, line, photo = res
            photo_path = f'temp_photo_{user_id}.jpg'
            with open(photo_path, 'wb') as f:
                f.write(photo)
            with open(photo_path, 'rb') as photo_file:
                bot.send_photo(user_id, photo=photo_file, caption=line)
            db.save_sent_line(user_id, line)
            logging.info(f"Sent line to user {user_id}: {line}")
        else:
            bot.send_message(user_id, "–í—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. ‚ù§Ô∏è–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!!!‚ù§Ô∏è")
            logging.info(f"User {user_id} has received all lines and photos.")

    logging.info("send_daily_line finished")

def get_all_users():
    db.cursor.execute('SELECT DISTINCT user_id FROM poem')
    users = [row[0] for row in db.cursor.fetchall()]
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {users}")
    return users

def schedule_daily_task():
    scheduler = BackgroundScheduler()
    scheduler.add_job(send_daily_line, 'cron', hour=12, minute=0)
    scheduler.start()
    logging.info("Scheduler started")

    try:
        while True:
            time.sleep(1)
    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()
        logging.info("Scheduler stopped")




#HANDLERS
@bot.message_handler(func=lambda message: message.text == "–ü–æ–º–æ—â—åüÜò")
def show_menu(message):
    menu_text = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                 "‚ú® /start - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –ø–æ–ª—É—á–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å—Ç—Ä–æ—á–∫–∏ —Å—Ç–∏—Ö–∞\n"
                 "‚ú® /show - –ü–æ–∫–∞–∂–µ—Ç –≤—Å–µ —Å–æ–±—Ä–∞–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∏—Ö–∞\n"
                 "‚ú® /n—Åfeel - –ü—Ä–∏—à–ª–µ—Ç –ª—é–±—É—é –ø—Ä–∏—è—Ç–Ω—É—é —Ñ—Ä–∞–∑—É —Ç–µ–±–µ\n"
                 "‚ú® /time - –ü—Ä–∏—à–ª–µ—Ç —Ç–µ–±–µ –æ—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏, –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏\n")

    bot.send_message(message.chat.id, menu_text, reply_markup=get_menu_keyboard())
    logging.info(f"User {message.chat.id} requested the help.")

@bot.message_handler(func=lambda message: message.text == "üéä–°—Ç–∞—Ä—Çüéä")
def show_start(message):
    start(message)
    logging.info(f"User {message.chat.id} requested the start.")

@bot.message_handler(func=lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—åüîé")
def show_sh_poem(message):
    show_poem(message)
    logging.info(f"User {message.chat.id} requested the show.")

@bot.message_handler(func=lambda message: message.text == "–¢—ã...‚ù§Ô∏è")
def show_ncfeel(message):
    show_nc(message)
    logging.info(f"User {message.chat.id} requested the ncfeel.")

@bot.message_handler(func=lambda message: message.text == "–í—Ä–µ–º—è‚è≥")
def show_ncfeel(message):
    show_time(message)
    logging.info(f"User {message.chat.id} requested time.")


if __name__ == '__main__':
    thread = Thread(target=schedule_daily_task)
    thread.start()
    logging.info("Starting bot polling.")
    bot.polling(non_stop=True, long_polling_timeout=30)
    logging.info("Bot polling started.")













